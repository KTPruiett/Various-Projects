# Fill in the board that needs solved below and run the program. 
board = [
    [9,7,0,0,0,5,1,0,6],
    [5,3,0,0,0,7,9,8,0],
    [2,0,0,0,1,9,0,7,0],
    [3,0,9,4,0,0,0,0,0],
    [0,5,0,0,0,0,0,4,0],
    [0,0,0,0,0,1,3,0,8],
    [0,9,0,7,6,0,0,0,3],
    [0,8,7,1,0,0,0,5,9],
    [1,0,3,5,0,0,0,6,4]
]


def solve(board):
    find = findEmpty(board)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1,10):
        if valid(board, i, (row, col)):
            board[row][col] = i

            if solve(board):
                return True

            board[row][col] = 0

    return False


def valid(board, number, position):
    # Check row
    for i in range(len(board[0])):
        if board[position[0]][i] == number and position[1] != i:
            return False

    # Check column
    for i in range(len(board)):
        if board[i][position[1]] == number and position[0] != i:
            return False

    # Check boardx
    boardXX = position[1] // 3
    boardXY = position[0] // 3

    for i in range(boardXY*3, boardXY*3 + 3):
        for j in range(boardXX * 3, boardXX*3 + 3):
            if board[i][j] == number and (i,j) != position:
                return False

    return True


def printBoard(board):
    print("_______________________")
    for i in range(len(board)):
        if i % 3 == 0 and i != 0:
            print("_______________________")

        for j in range(len(board[0])):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")

            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")


def findEmpty(board):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == 0:
                return (i, j)  # row, col

    return None
print("\nBefore:")
printBoard(board)
solve(board)
print("\nAfter:")
printBoard(board)
