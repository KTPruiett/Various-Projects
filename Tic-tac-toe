from random import seed
from random import randint
global game, board, userTurn, firstRound, defLeftV, defRightV, defMidV, defTopH, defMidH, defBottomH, offLeftV, offRightV, offMidV, offTopH, offMidH, offBottomH, offAngleLeft, offAngleRight, defAngleLeft, defAngleRight, offTlbm, offTlmr, offTrbm, offTrml, offTmbr, offTmbl, offMlbr, offMrbl, defMrbl, defMlbr, defTmbl, defTmbr, defTrml, defTrbm, defTlmr, defTlbm, round, coinFlip
board = [
[" "," "," "],
[" "," "," "],
[" "," "," "]
]
userTurn = True
firstRound = True
defLeftV = True
defRightV = True
defMidV = True
defTopH = True
defMidH = True
defBottomH = True
offLeftV= True
offRightV = True
offMidV = True
offTopH = True 
offMidH = True
offBottomH = True
offAngleLeft = True
offAngleRight = True
defAngleLeft = True
defAngleRight = True
offTlbm = True 
offTlmr = True
offTrbm = True
offTrml = True
offTmbr = True
offTmbl = True
offMlbr = True
offMrbl = True
defMrbl = True
defMlbr = True
defTmbl = True
defTmbr = True
defTrml = True
defTrbm = True
defTlmr = True
defTlbm = True
round = True
game = True
coinFlip = 0
def displayBoard():
    for i in range(3):
        print(" "+board[i][0]+" | "+board[i][1]+" | "+board[i][2])
        if i <2:
            print(" __|___|__")
        else:
            print(" ")            
def coin():
    global coinFlip
    coinFlip = randint(0,1)# decides who will play first
def run():
    global game, board, userTurn, firstRound, defLeftV, defRightV, defMidV, defTopH, defMidH, defBottomH, offLeftV, offRightV, offMidV, offTopH, offMidH, offBottomH, offAngleLeft, offAngleRight, defAngleLeft, defAngleRight, offTlbm, offTlmr, offTrbm, offTrml, offTmbr, offTmbl, offMlbr, offMrbl, defMrbl, defMlbr, defTmbl, defTmbr, defTrml, defTrbm, defTlmr, defTlbm, round, coinFlip
    while game:
        displayBoard()
        coin()
        while round:
            if coinFlip == 1:                
                coinFlip = 0
                user()
                displayBoard()
                checkWin()
            else:
                coinFlip = 1
                opponent()
                firstRound = False
                displayBoard()
                checkWin()
        else:
            r = input("Would you like to play again? (Y/N)")
            asking = True
            while asking:
                if r == "Y" or r == 'y':
                    asking = False
                    userTurn = True
                    firstRound = True
                    defLeftV = True
                    defRightV = True
                    defMidV = True
                    defTopH = True
                    defMidH = True
                    defBottomH = True
                    offLeftV= True
                    offRightV = True
                    offMidV = True
                    offTopH = True 
                    offMidH = True
                    offBottomH = True
                    offAngleLeft = True
                    offAngleRight = True
                    defAngleLeft = True
                    defAngleRight = True
                    offTlbm = True 
                    offTlmr = True
                    offTrbm = True
                    offTrml = True
                    offTmbr = True
                    offTmbl = True
                    offMlbr = True
                    offMrbl = True
                    defMrbl = True
                    defMlbr = True
                    defTmbl = True
                    defTmbr = True
                    defTrml = True
                    defTrbm = True
                    defTlmr = True
                    defTlbm = True
                    round = True
                    game = True
                    for i in range(3):
                        for j in range(3):
                            board[i][j] = " "
                elif r == "N" or r == 'n':
                    break
                else:
                    print("This was not Y or N")
           
def checkWin(): # checks if someone won
    global board, round
    count = 0
    for i in range(3):# horizontal check
        for j in range(1):
            if board[i][j] == 'X' and board[i][j+1] == 'X' and board[i][j+2] == 'X':# yx
                print("You won!")
                j = 4
                i = 4
                round = False                
            elif board[i][j] == 'O' and board[i][j+1] == 'O' and board[i][j+2] == 'O':
                print("They won!")
                j = 4
                i = 4                   
                round = False                
    for i in range(3):# vertical check
        for j in range(1):
            if board[j][i] == 'X' and board[j+1][i] == 'X' and board[j+2][i] == 'X':
                print("You won!")
                round = False
            elif board[j][i] == 'O' and board[j+1][i] == 'O' and board[j+2][i] == 'O':
                print("They won!")
                round = False
    if board[0][0] == 'X' and board[1][1] == 'X' and board[2][2] == 'X':# angle check
        print("You won!")
        round = False
    elif board[0][0] == 'O' and board[1][1] == 'O' and board[2][2] == 'O':
        print("They won!")
        round = False
    elif board[0][2] == 'X' and board[1][1] == 'X' and board[2][0] == 'X':
        print("You won!")
        round = False
    elif board[0][2] == 'O' and board[1][1] == 'O' and board[2][0] == 'O':
        print("They won!")
        round = False
    for i in range(3):# draw check
        for j in range(3):
            if board[i][j] != " ":
                count += 1
    if count == 9:
        round = False
        count = 0
        print("It's a draw!")
    else:
        count = 0

def user():
    global game, board, userTurn
    while userTurn:
        r = input("Please choose a location to place an 'X' on (Hint: board reads 1-9 left to right): ")
        if int(r) == 1:
            if board[0][0] == " ":
                board[0][0] = 'X'
                return
            else:
                print("Incorrect location! This spot is no longer empty!")
        elif int(r)==2:
            if board[0][1] == " ":
                board[0][1] = 'X'
                return
            else:
                print("Incorrect location! This spot is no longer empty, try again!")
        elif int(r)==3:
            if board[0][2]  == " ":
                board[0][2]='X'
                return
            else:
                print("Incorrect location! This spot is no longer empty, try again!")
        elif int(r)==4:
            if board[1][0]  == " ":
                board[1][0] = 'X'
                return
            else:
                print("Incorrect location! This spot is no longer empty, try again!")
        elif int(r)==5:
            if board[1][1]  == " ":
                board[1][1] = 'X'
                return
            else:
                print("Incorrect location! This spot is no longer empty, try again!")
        elif int(r)==6:
            if board[1][2]  == " ":
                board[1][2] = 'X'
                return
            else:
                print("Incorrect location! This spot is no longer empty, try again!")
        elif int(r)==7:
            if board[2][0]   == " ":
                board[2][0] = 'X'
                return
            else:
                print("Incorrect location! This spot is no longer empty, try again!")
        elif int(r)==8:
            if board[2][1]  == " ":
                board[2][1] = 'X'
                return
            else:
                print("Incorrect location! This spot is no longer empty, try again!")
        elif int(r)==9:
            if board[2][2]  == " ":
                board[2][2] = 'X'
                return
            else:
                print("Incorrect location! This spot is no longer empty, try again!")
        else:
            print("This is not between 1 and 9. Try again.")

def opponent():
    global board, firstRound, defLeftV, defRightV, defMidV, defTopH, defMidH, defBottomH, offLeftV, offRightV, offMidV, offTopH, offMidH, offBottomH, offAngleLeft, offAngleRight, defAngleLeft, defAngleRight, offTlbm, offTlmr, offTrbm, offTrml, offTmbr, offTmbl, offMlbr, offMrbl, defMrbl, defMlbr, defTmbl, defTmbr, defTrml, defTrbm, defTlmr, defTlbm
    print("Oppenent is choosing...\n")
    # offensive strats below-----------------------------------------------------            
    if offTopH:
        if board[0][0] == 'O' and board[0][1] == 'O' or board[0][1] == 'O' and board[0][2] == 'O' or board[0][0] == 'O' and board[0][2] == 'O':#Top H
            for i in range(3):
                if board[0][i] == " ":
                    board[0][i] = 'O'                    
                    offTopH = False   
                    return
    if offMidH:
        if board[1][0] == 'O' and board[1][1] == 'O' or board[1][1] == 'O' and board[1][2] == 'O' or board[1][0] == 'O' and board[1][2] == 'O':#Mid H
            for i in range(3):
                if board[1][i] == " ":
                    board[1][i] = 'O'                    
                    offMidH = False  
                    return
    if offBottomH:
        if board[2][0] == 'O' and board[2][1] == 'O' or board[2][1] == 'O' and board[2][2] == 'O' or board[2][0] == 'O' and board[2][2] == 'O':#Low H
            for i in range(3):
                if board[2][i] == " ":
                    board[2][i] = 'O'                    
                    offBottomH = False
                    return
# --------------------------------------vertical            
    if offLeftV:
        if board[0][0] == 'O' and board[1][0] == 'O' or board[1][0] == 'O' and board[2][0] == 'O' or board[0][0] == 'O' and board[2][0] == 'O':#left V
            for i in range(3):
                for j in range(3):
                    if i == 0 and j == 0 or i == 1 and j == 0 or i == 2 and j == 0:
                        if board[i][j] == " ":
                            board[i][j] = 'O'                            
                            offLeftV = False 
                            return
    if offMidV:
        if board[0][1] == 'O' and board[1][1] == 'O' or board[1][1] == 'O' and board[2][1] == 'O' or board[0][1] == 'O' and board[2][1] == 'O':#mid V
            for i in range(3):
                for j in range(3):
                    if i == 0 and j == 1 or i == 1 and j == 1 or i == 2 and j == 1:
                        if board[i][j] == " ":
                            board[i][j] = 'O'                            
                            offMidV = False  
                            return
    if offRightV:
        if board[0][2] == 'O' and board[1][2] == 'O' or board[1][2] == 'O' and board[2][2] == 'O' or board[0][2] == 'O' and board[2][2] == 'O':#right V
            for i in range(3):
                for j in range(3):
                    if i == 0 and j == 2 or i == 1 and j == 2 or i == 2 and j == 2:
                        if board[i][j] == " ":
                            board[i][j] = 'O'                            
                            offRightV = False
                            return
# ----------------------------------------------------- left and right angle            
    if offAngleRight:
        if board[0][2] == 'O' and board[1][1] == 'O' or board[1][1] == 'O' and board[2][0] == 'O' or board[0][2] == 'O' and board[2][0] == 'O':#TR-BL
            j = 2
            for i in range(3):
                if board[i][j] == " ":
                    board[i][j] = 'O'
                    offAngleRight = False
                    return
                else:
                    j -= 1
                            
    if offAngleLeft:
        if board[0][0] == 'O' and board[1][1] == 'O' or board[1][1] == 'O' and board[2][2] == 'O' or board[0][0] == 'O' and board[2][2] == 'O':#TL-BR
            for i in range(3):
                if board[i][i] == " ":
                    board[i][i] = 'O'
                    offAngleLeft = False
                    j -= 1
                    return
                                                
# --------------------------------------- L strat            
    if offTlbm: 
        if board[0][0] == 'O' and board[2][1] == 'O':# TL BM
            if board[2][0] == " ":
                board[2][0] = 'O'
                offTlbm = False
                return
                        
    if offTlmr:
        if board[0][0] == 'O' and board[1][2] == 'O':# TL MR
            if board[0][2] == " ":
                board[0][2] = 'O'
                offTlmr = False
                return
                        
    if offTrbm:
        if board[0][2] == 'O' and board[2][1] == 'O':# TR BM
            if board[2][2] == " ":
                board[2][2] = 'O'
                offTrbm = False
                return
                        
    if offTrml:
        if board[0][1] == 'O' and board[1][0] == 'O':# TR ML
            if board[0][0] == " ":
                board[0][0] = 'O'
                offTrml = False
                return
                        
    if offTmbr:
        if board[0][1] == 'O' and board[2][2] == 'O':# TM BR
            if board[0][2] == " ":
                board[0][2] = 'O'
                offTmbr = False
                return                
                        
    if offTmbl:
        if board[0][1] == 'O' and board[2][0] == 'O':# TM BL
            if board[0][0] == " ":
                board[0][0] = 'O'
                offTmbl = False
                return                
                        
    if offMlbr: 
        if board[1][0] == 'O' and board[2][2] == 'O':# ML BR
            if board[2][0] == " ":
                board[2][0] = 'O'
                offMlbr = False
                return                
                        
    if offMrbl:
        if board[1][2] == 'O' and board[2][0] == 'O':# MR BL
            if board[2][2] == " ":
                board[2][2] = 'O'
                offMrbl = False
                return
    # defensive strats below----------------------------------horizontal
    if defTopH:
        if board[0][0] == 'X' and board[0][1] == 'X' or board[0][1] == 'X' and board[0][2] == 'X' or board[0][0] == 'X' and board[0][2] == 'X':#Top H
            for i in range(3):
                if board[0][i] == " ":
                    board[0][i] = 'O'                    
                    defTopH = False
                    return                    
    if defMidH:
        if board[1][0] == 'X' and board[1][1] == 'X' or board[1][1] == 'X' and board[1][2] == 'X' or board[1][0] == 'X' and board[1][2] == 'X':#Mid H
            for i in range(3):
                if board[1][i] == " ":
                    board[1][i] = 'O'                    
                    defMidH = False
                    return
    if defBottomH:
        if board[2][0] == 'X' and board[2][1] == 'X' or board[2][1] == 'X' and board[2][2] == 'X' or board[2][0] == 'X' and board[2][2] == 'X':#Low H
            for i in range(3):
                if board[2][i] == " ":
                    board[2][i] = 'O'                    
                    defBottomH = False
                    return                             
    # -------------------------------------- vertical            
    if defLeftV:
        if board[0][0] == 'X' and board[1][0] == 'X' or board[1][0] == 'X' and board[2][0] == 'X' or board[0][0] == 'X' and board[2][0] == 'X':#left V
            for i in range(3):
                for j in range(3):
                    if i == 0 and j == 0 or i == 1 and j == 0 or i == 2 and j == 0:
                        if board[i][j] == " ":
                            board[i][j] = 'O'                            
                            defLeftV = False
                            return
    if defMidV:
        if board[0][1] == 'X' and board[1][1] == 'X' or board[1][1] == 'X' and board[2][1] == 'X' or board[0][1] == 'X' and board[2][1] == 'X':#mid V
            for i in range(3):
                for j in range(3):
                    if i == 0 and j == 1 or i == 1 and j == 1 or i == 2 and j == 1:
                        if board[i][j] == " ":
                            board[i][j] = 'O'                            
                            defMidV = False
                            return
    if defRightV:
        if board[0][2] == 'X' and board[1][2] == 'X' or board[1][2] == 'X' and board[2][2] == 'X' or board[0][2] == 'X' and board[2][2] == 'X':#right V
            for i in range(3):
                for j in range(3):
                    if i == 0 and j == 2 or i == 1 and j == 2 or i == 2 and j == 2:
                        if board[i][j] == " ":
                            board[i][j] = 'O'
                            defRightV = False  
                            return
    # ----------------------------------------------------- left and right angle
            
    if defAngleLeft:
        if board[0][2] == 'X' and board[1][1] == 'X' or board[1][1] == 'X' and board[2][0] == 'X' or board[0][2] == 'X' and board[2][0] == 'X':#TR-BL
            j = 2
            for i in range(3):
                if board[i][j] == " ":
                    board[i][j] = 'O'
                    defAngleLeft = False
                    j-=1
                    return                   
                            
    if defAngleRight:
        if board[0][0] == 'X' and board[1][1] == 'X' or board[1][1] == 'X' and board[2][2] == 'X' or board[0][0] == 'X' and board[2][2] == 'X':#TL-BR
            for i in range(3):
                if board[i][i] == " ":
                    board[i][i] = 'O'
                    defAngleRight = False
                    j-1
                    return                                                
    # --------------------------------------- L strat            
    if defTlbm:
        if board[0][0] == 'X' and board[2][1] == 'X':# TL BM
            if board[2][0] == " ":
                board[2][0] = 'O'
                defTlbm = False
                return
                        
    if defTlmr:
        if board[0][0] == 'X' and board[1][2] == 'X':# TL MR
            if board[0][2] == " ":
                board[0][2] = 'O'
                defTlmr = False
                return                
                        
    if defTrbm:
        if board[0][2] == 'X' and board[2][1] == 'X':# TR BM
            if board[2][2] == " ":
                board[2][2] = 'O'
                defTrbm = False
                return                
                        
    if defTrml:
        if board[0][1] == 'X' and board[1][0] == 'X':# TR ML
            if board[0][0] == " ":
                board[0][0] = 'O'
                defTrml = False
                return
                        
    if defTmbr:
        if board[0][1] == 'X' and board[2][2] == 'X':# TM BR
            if board[0][2] == " ":
                board[0][2] = 'O'
                defTmbr = False
                return
                        
    if defTmbl:
        if board[0][1] == 'X' and board[2][0] == 'X':# TM BL
            if board[0][0] == " ":
                board[0][0] = 'O'
                defTmbl = False
                return
                        
    if defMlbr:
        if board[1][0] == 'X' and board[2][2] == 'X':# ML BR
            if board[2][0] == " ":
                board[2][0] = 'O'
                defMlbr = False
                return
                        
    if defMrbl:
        if board[1][2] == 'X' and board[2][0] == 'X':# MR BL
            if board[2][2] == " ":
                board[2][2] = 'O'
                defMrbl = False
                return
                                        
    # first round only -----            
    if firstRound:# for corner starts - TL TR BL BR
        if board[0][0] == 'X' or board[0][2] == 'X' or board[2][0] == 'X' or board[2][2] == 'X':
            board[1][1] = 'O'
            firstRound = False
            return
                                
        # up down left right xPos
        if board[0][1] == 'X':# TM 
            board[2][1] = 'O'
            firstRound = False
            return
                    
        if board[2][1] == 'X':# BM
            board[0][1] = 'O'
            firstRound = False
            return
                    
        if board[1][0] == 'X':# LM
            board[1][2] = 'O'
            firstRound = False
            return
                    
        if board[1][2] == 'X':# RM
            board[1][0] = 'O'
            firstRound = False
            return
        
    for i in range(1):
        opChoice = randint(0,8)# if no strat is available it will randomly choose
        if opChoice == 0:
            if board[0][0] == " ":
                board[0][0] = 'O'
                return                                            
            else:
                i = 0
        elif opChoice == 1:
            if board[0][1] == " ":
                board[0][1] = 'O'
                return                
            else:
                i = 0
        elif opChoice == 2:
            if board[0][2] == " ":
                board[0][2] = 'O'
                return                
            else:
                i = 0
        elif opChoice == 3:
            if board[1][0] == " ":
                board[1][0] = 'O'
                return                
            else:
                i = 0
        elif opChoice == 4:
            if board[1][1] == " ":
                board[1][1] = 'O'
                return                
            else:
                    i = 0
        elif opChoice == 5:
            if board[1][2] == " ":
                board[1][2] = 'O'
                return                
            else:
                i = 0
        elif opChoice == 6:
            if board[2][0] == " ":
                board[2][0] = 'O'
                return                
            else:
                i = 0
        elif opChoice == 7:
            if board[2][1] == " ":
                board[2][1] = 'O'
                return                
            else:
                i = 0
        elif opChoice == 8:
            if board[2][2] == " ":
                board[2][2] = 'O'
                return                
            else:
                i = 0
run()
